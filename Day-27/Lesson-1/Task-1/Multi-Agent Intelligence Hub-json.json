{
  "name": "My workflow 5",
  "nodes": [
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"ID\": \"a7f92xk3\",\n  \"response\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        912,
        336
      ],
      "id": "13117feb-f9c3-4167-8ea0-dd3e9ca6deab",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "jsCode": "// --- Universal File Router ---\n// Handles any file upload key (CSV, Image, etc.) or text input\n\nconst item = $input.item;\nconst binary = item.binary || {};\nconst json = item.json || {};\n\n// üîç Detect the first binary key automatically (since webhook can name it dynamically)\nconst binaryKeys = Object.keys(binary);\nlet detectedKey = binaryKeys.length ? binaryKeys[0] : null;\nlet fileMeta = detectedKey ? binary[detectedKey] : null;\n\n// --- üìä CSV Detection ---\nif (\n  fileMeta &&\n  (\n    (fileMeta.mimeType && fileMeta.mimeType.includes('csv')) ||\n    (fileMeta.fileName && fileMeta.fileName.toLowerCase().endsWith('.csv'))\n  )\n) {\n  return [\n    {\n      json: {\n        route: 'csv',\n        info: `Detected CSV file (${detectedKey})`,\n        fileName: fileMeta.fileName || 'unknown.csv',\n      },\n      binary,\n    },\n  ];\n}\n\n// --- üñº IMAGE Detection ---\nif (\n  fileMeta &&\n  fileMeta.mimeType &&\n  fileMeta.mimeType.startsWith('image/')\n) {\n  return [\n    {\n      json: {\n        route: 'image',\n        info: `Detected image file (${detectedKey})`,\n        fileName: fileMeta.fileName || 'unknown.png',\n      },\n      binary,\n    },\n  ];\n}\n\n// --- üßæ TEXT Detection ---\nconst text =\n  json.text ||\n  json.Text ||\n  json.body?.text ||\n  json.body?.Text ||\n  json.body?.message ||\n  null;\n\nif (text) {\n  return [\n    {\n      json: {\n        route: 'text',\n        text,\n        info: 'Detected text input',\n      },\n    },\n  ];\n}\n\n// --- ‚ùå Default Fallback ---\nreturn [\n  {\n    json: {\n      route: 'unknown',\n      info: 'No matching data type detected. Binary may not contain recognizable MIME type.',\n      debugBinaryKeys: binaryKeys,\n      debugBinaryMeta: fileMeta,\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -192,
        144
      ],
      "id": "e0efb484-1b16-4d58-9caf-f16345a48627",
      "name": "route"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "image",
                    "rightValue": "={{ $json.route }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "e26ad4e7-e4f3-4916-8746-3e8b7174da67"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Image"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8d88f953-7eb0-4dba-8092-340e8a73e240",
                    "leftValue": "text",
                    "rightValue": "={{ $json.route }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Text"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ee6f0511-b4cc-40ca-bafd-833659c22e77",
                    "leftValue": "csv",
                    "rightValue": "={{ $json.route }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "CSV"
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        64,
        128
      ],
      "id": "1fb703d1-2fbf-4801-ae54-dc75e256888f",
      "name": "Switch"
    },
    {
      "parameters": {
        "sendTo": "jashwanthboddupally@gmail.com",
        "subject": "=AI Image Analysis Ready ",
        "message": "={{ $json.output.AI_response }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1200,
        -432
      ],
      "id": "3c368a0f-0dba-4adf-944e-29ae4deeaeac",
      "name": "Send a message",
      "webhookId": "670288ca-0561-4d45-81f9-d9daace3a8eb",
      "credentials": {
        "gmailOAuth2": {
          "id": "H8FsF1EFAlLLjH1d",
          "name": "N8n office setup"
        }
      }
    },
    {
      "parameters": {
        "model": "pixtral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        720,
        -256
      ],
      "id": "54b32ded-f289-4d04-b17d-a5b35dc6d1e2",
      "name": "Mistral Cloud Chat Model",
      "credentials": {
        "mistralCloudApi": {
          "id": "ieiFSnFBGuQ0CBgY",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"input\": \"Image\",\n  \"AI_response\": \"string\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        896,
        -256
      ],
      "id": "3ccabf4b-3b7e-47cd-9ca4-9344d5078df2",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appv4H0c4telkhEMA",
          "mode": "list",
          "cachedResultName": "N8n Air table",
          "cachedResultUrl": "https://airtable.com/appv4H0c4telkhEMA"
        },
        "table": {
          "__rl": true,
          "value": "tbl5xzf3NjnNeyhNH",
          "mode": "list",
          "cachedResultName": "Table 1",
          "cachedResultUrl": "https://airtable.com/appv4H0c4telkhEMA/tbl5xzf3NjnNeyhNH"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "AI Response": "={{ $json.output.response }}",
            "Response ID": "={{ $json.output.ID }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "ID",
              "displayName": "ID",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "AI Response",
              "displayName": "AI Response",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "Created",
              "displayName": "Created",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": true,
              "removed": true
            },
            {
              "id": "Response ID",
              "displayName": "Response ID",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        1120,
        96
      ],
      "id": "37b456e5-96e3-4695-8f18-41313b430e40",
      "name": "Create a record",
      "credentials": {
        "airtableTokenApi": {
          "id": "4cWWUtcxx7fhI8MX",
          "name": "Airtable Personal Access Token account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        720,
        304
      ],
      "id": "cfd14111-da18-41ff-9596-13a1caa20261",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "o1yvYdsTMwd04brT",
          "name": "Gemini 2.5-flash"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an advanced CSV data analysis and visualization system.\n\n## Objective\nYou receive CSV data and an optional file name. Analyze the entire dataset for patterns, trends, and key takeaways. Then generate:\n- A single **email-ready HTML body** with up to three static charts (Bar, Line, Pie)\n- A short summary and insights\n- Return JSON with `html_body` and `subject`\n\n## Inputs\n- `csv`: array of row objects from a CSV file{{ $json.csv }}\n- `fileName`: optional file name {{ $json.csv[0]['file name'] }}\n\n## Critical Rules\n- **One response only** for the full dataset.\n- **NO Markdown**, code blocks, or extra text.\n- Charts must be rendered as **QuickChart PNG URLs**:\n  - Base: `https://quickchart.io/chart`\n  - Param: `c=` (URL-encoded Chart.js JSON)\n  - Width: 700, Height: 400, White background\n\n## HTML Email Body Requirements:\n- Use inline `<h2>`, `<img>`, and `<ul>` tags\n- Up to 3 `<img>` charts (bar/line/pie) with descriptive `alt` text\n- A short bullet list of insights (5‚Äì10 max)\n- Clean, inline-styled HTML compatible with Gmail\n- Escape all quotes inside the HTML\n\n## Chart Selection Logic:\n- first insights then charts , adjust side by side medim size No Large Charts\n- Bar: category + numeric\n- Line: date + numeric\n- Pie: categorical total share (‚â§8 values)\n- Two numeric: scatter-style bar or line\n\n## Validation:\n- If CSV is empty/unreadable, return:\n  - `subject`: \"Unable to Analyze CSV\"\n  - `html_body`: <p>Polite error message</p>\n\nNow analyze `csv` and `fileName`, return ONE valid JSON object:\n```json\n{\n  \"subject\": \"Sales Analysis ‚Äî Q4 2025\",\n  \"html_body\": \"<html>...</html>\"\n}\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1056,
        592
      ],
      "id": "7e65fc81-ef34-437b-9259-744373ef4485",
      "name": "CSV Processor AI Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=ROLE\nYou are a Vision + OCR assistant running inside an n8n workflow. You always receive exactly one image as a BINARY ATTACHMENT (from a Webhook upload). The orchestrator already attached this image to your message; do not ask for URLs.\n\nGOALS\n- First confirm the input if input is image then start the processes.\n- Describe the image into text \n- Create an HTML mail body for adding the image description in it.\n\nINPUT CONTEXT (from current n8n item)\n- The image is attached as a binary part. Assume it is already available to you; do NOT fetch external resources.\n- binary_property: {{ Object.keys($binary || {})[0] || \"image\" }}\n\nBEHAVIOR\n- Treat the attached binary as the single source of truth. If multiple binaries exist, conceptually prefer the first or most image-like content; otherwise proceed with any valid one.\n- If text is cut/blurred/partial, state that explicitly.\n- Mention brands/logos only if unambiguously visible/legible.\n- Avoid sensitive inferences (age, ethnicity, politics, health). Do not guess identities.\n\nOUTPUT FORMAT\nYou MUST respond with a valid JSON object in the following structure:\n{\n  \"input\": \"Image\",\n  \"AI_response\": \"string\"\n}\n\nWhere:\n- \"input\" is always the literal string \"Image\"\n- \"AI_response\" contains the complete HTML email body with the image description\n\nThe AI_response should be a complete HTML email template with proper structure including:\n- HTML DOCTYPE and basic structure\n- Styled email-friendly HTML\n- The image description embedded in the body\n- Professional formatting suitable for email clients\n\nCRITICAL: Your entire response must be ONLY the JSON object. No additional text before or after.",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        736,
        -432
      ],
      "id": "e26ae19c-8b38-4a90-99df-6cb3de5cca8c",
      "name": "Image Processor Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an advanced text summarization system.\n\n### Instructions:\nYou will receive an input text.  \nYour task is to analyze and summarize it clearly and concisely.  \n\n\nInput :\n{{ $json.text }}\n\nThe output **must always be in valid JSON format** as follows:\n\n{\n  \"ID\": \"<a random unique ID>\",\n  \"response\": \"<the summarized text>\"\n}\n\n### Rules:\n1. The ID should be a randomly generated alphanumeric string (6‚Äì10 characters).\n2. Do not include any additional fields.\n3. The \"response\" should be a single coherent summary of the input text.\n4. The JSON output must be strictly machine-readable (no comments, no markdown, no extra text).\n\n### Example:\n\n**Input:**\nArtificial Intelligence is revolutionizing industries by automating complex tasks and enabling smarter decision-making.\n\n**Output:**\n{\n  \"ID\": \"a7f92xk3\",\n  \"response\": \"AI automates complex tasks and improves decision-making across industries.\"\n}\n\nNow process the user's input text and produce the summarized JSON.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        736,
        80
      ],
      "id": "a26dc080-a228-41a7-9f00-253dbeac8c87",
      "name": "Data Summarizer Agent"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "d170ae80-5a14-4387-af7e-1be717dc1c21",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -432,
        128
      ],
      "id": "c04dbca2-a096-4e49-8cfd-e50014acf616",
      "name": "Webhook",
      "webhookId": "d170ae80-5a14-4387-af7e-1be717dc1c21"
    },
    {
      "parameters": {
        "sendTo": "jashwanthboddupally@gmail.com",
        "subject": "=AI CSV file {{ $json.output.subject }}",
        "message": "={{ $json.output.html_body }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1392,
        608
      ],
      "id": "c1bcbfa3-7435-455e-9e5e-19bcf487ad35",
      "name": "Send a message1",
      "webhookId": "3eb19742-6b5d-4146-90e9-855b1145f11c",
      "credentials": {
        "gmailOAuth2": {
          "id": "H8FsF1EFAlLLjH1d",
          "name": "N8n office setup"
        }
      }
    },
    {
      "parameters": {
        "content": "## Image Analysis Agent",
        "height": 464,
        "width": 1040,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        432,
        -544
      ],
      "typeVersion": 1,
      "id": "11d44247-0a89-4c9e-83ee-b0fc48d4328d",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Text Summarize \n",
        "height": 496,
        "width": 1040,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        416,
        -16
      ],
      "typeVersion": 1,
      "id": "1605b0df-0f76-4c02-8001-291956a5b63a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## CSV Processer Agent\n",
        "height": 448,
        "width": 1232,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        400,
        512
      ],
      "typeVersion": 1,
      "id": "332d1dbf-f733-4de7-9070-a0294ef3c4d2",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"html_body\":\"string\",\n  \"subject\":\"string\"\n  \n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1200,
        800
      ],
      "id": "c9b595bd-b2ae-4a62-93ab-f2d942f93dfe",
      "name": "Structured Output Parser2"
    },
    {
      "parameters": {
        "content": "## Webhook Trigger",
        "height": 400,
        "width": 816
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -544,
        -16
      ],
      "typeVersion": 1,
      "id": "5177044f-eeb7-4e9a-87ff-cc09a8ac6713",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "binaryPropertyName": "Csv file",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        448,
        720
      ],
      "id": "27f8e4ec-e155-4355-97ab-bbafedd45d55",
      "name": "Csv",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "169eeab3-9644-4f91-a2f0-105d4c2a1fa1",
              "name": "file name",
              "value": "={{ $('Switch').item.json.fileName }}",
              "type": "string"
            },
            {
              "id": "6e527f32-9b02-416f-b079-0ab7a4619862",
              "name": "Csv ",
              "value": "={{$json}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        608,
        720
      ],
      "id": "acb88413-c2c7-4a5b-90df-8a1497ecc39f",
      "name": "filter CSV "
    },
    {
      "parameters": {
        "model": "pixtral-large-latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatMistralCloud",
      "typeVersion": 1,
      "position": [
        1008,
        816
      ],
      "id": "b2da46a1-1901-434c-8927-0f23dba3f0f1",
      "name": "Mistral Cloud Chat Model1",
      "credentials": {
        "mistralCloudApi": {
          "id": "ieiFSnFBGuQ0CBgY",
          "name": "Mistral Cloud account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// This combines all input items (each CSV row) into a single array or CSV string\n\nconst allRows = items.map(item => item.json);\n\n// OPTION 1: Send JSON array (preferred for LLM parsing)\nreturn [{\n  json: {\n    csv: allRows,\n    fileName: items[0].json.fileName || 'uploaded.csv'\n  }\n}];\n\n// OPTION 2: Convert to raw CSV string if your LLM expects that instead\n/*\nconst headers = Object.keys(allRows[0]);\nconst csvString = [\n  headers.join(','),\n  ...allRows.map(row => headers.map(h => JSON.stringify(row[h] || '')).join(','))\n].join('\\n');\n\nreturn [{\n  json: {\n    csv: csvString,\n    fileName: items[0].json.fileName || 'uploaded.csv'\n  }\n}];\n*/\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        784,
        720
      ],
      "id": "583910ee-e2a4-4dc4-8266-bc015071296b",
      "name": "combines all input items"
    }
  ],
  "pinData": {},
  "connections": {
    "route": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Image Processor Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data Summarizer Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Csv",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image Processor Agent": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Image Processor Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Image Processor Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Data Summarizer Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Data Summarizer Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Data Summarizer Agent": {
      "main": [
        [
          {
            "node": "Create a record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "route",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CSV Processor AI Agent": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser2": {
      "ai_outputParser": [
        [
          {
            "node": "CSV Processor AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Csv": {
      "main": [
        [
          {
            "node": "filter CSV ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "filter CSV ": {
      "main": [
        [
          {
            "node": "combines all input items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Mistral Cloud Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "CSV Processor AI Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "combines all input items": {
      "main": [
        [
          {
            "node": "CSV Processor AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3df7dc3f-e9ba-48f2-adf0-0ceb586ea02b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3dea0691859c9aeb717420e8c6ea2b1a347ba82ac56d40cedc9406e5f2667166"
  },
  "id": "5MMNeonylj8S5Y1S",
  "tags": []
}