{
  "name": "AI calendly notifications demo",
  "nodes": [
    {
      "parameters": {
        "formTitle": "calendly AI Agent ",
        "formDescription": "AI agents integrated with Calendly AI Agent to enable the notifications, revolutionize scheduling processes etc.",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Title ",
              "requiredField": true
            },
            {
              "fieldLabel": "Description",
              "requiredField": true
            },
            {
              "fieldLabel": "Date",
              "fieldType": "date",
              "requiredField": true
            },
            {
              "fieldLabel": "Start time",
              "fieldType": "textarea",
              "placeholder": " \"12:00 PM\" in 12-hour format",
              "requiredField": true
            },
            {
              "fieldLabel": "End time ",
              "fieldType": "textarea",
              "placeholder": " \"12:00 PM\" in 12-hour format",
              "requiredField": true
            },
            {
              "fieldLabel": "Email",
              "fieldType": "email",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -640,
        -64
      ],
      "id": "4803bb4f-1073-40b7-9be8-7719661d57f0",
      "name": "AI Assistant Intake",
      "webhookId": "67f20855-d57f-43aa-8d54-f6da512156ce"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are CalendarFormatter, an assistant that normalizes event details into Google-Calendar-ready fields and also prepares an email-ready summary.\n\nINPUTS (from user or upstream nodes)\n- Date: a calendar date in YYYY-MM-DD (e.g., \"2025-09-25\")\n- Start time: a 12-hour time with AM/PM (e.g., \"12:00 PM\")\n- End time: a 12-hour time with AM/PM (e.g., \"01:00 PM\")\n- Title (optional): short event title\n- Description (optional): plain text\n\nREQUIREMENTS\n1) Use timezone: \"Asia/Kolkata\" (UTC+05:30).\n2) Return ONLY valid JSON (no markdown, no commentary).\n3) Compute RFC-3339 strings:\n   - \"start_iso\": \"YYYY-MM-DDTHH:mm:ss+05:30\"\n   - \"end_iso\":   \"YYYY-MM-DDTHH:mm:ss+05:30\"\n4) If End time is missing, set it to Start time + 1 hour.\n5) Include friendly displays for logs:\n   - \"start_display\": \"25 Sep 2025, 12:00 PM IST\"\n   - \"end_display\":   \"25 Sep 2025, 01:00 PM IST\"\n6) Include passthrough text fields:\n   - \"summary\": Title (or empty if not given)\n   - \"description\": Description (or empty)\n7) Validate: end must be after start; if not, add 1 hour to start for end.\n8) Build email-ready fields:\n   - \"email_subject\": concise subject like \"ðŸ“… Event: <summary> â€” 25 Sep, 12:00â€“01:00 PM IST\"\n   - \"email_summary\": a 1â€“2 line plain-text blurb for previews (max ~140 chars)\n   - \"email_html\": safe inline-HTML body summarizing the event (no external CSS, no scripts)\n\nOUTPUT JSON SHAPE (exact keys)\n{\n  \"summary\": \"\",\n  \"description\": \"\",\n  \"start_iso\": \"\",\n  \"end_iso\": \"\",\n  \"start_display\": \"\",\n  \"end_display\": \"\",\n  \"timezone\": \"Asia/Kolkata\",\n  \"email_subject\": \"\",\n  \"email_summary\": \"\",\n  \"email_html\": \"\"\n}\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -320,
        -80
      ],
      "id": "bb6d6059-c40f-489b-805e-218d1f06be76",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "gpt-4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -320,
        192
      ],
      "id": "9d2ae5a3-1a98-4658-b9b2-f16e9c2f2d70",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "cLCdY5swsxgvlPYD",
          "name": "Open AI API KEY"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Robust Calendar formatter / passthrough\n// Accepts either:\n//  A) Traditional fields: \"Date\", \"Start time\", \"End time\", \"Title\", \"Description\"\n//  B) AI Agent output under \"output\" (string or object) with start_iso/end_iso/summary/description\n\nfunction parseTime12h(t) {\n  if (typeof t !== 'string') return { h: 9, m: 0 }; // default 09:00\n  const m = t.trim().match(/^(\\d{1,2}):(\\d{2})\\s*(AM|PM)$/i);\n  if (!m) return { h: 9, m: 0 };\n  let h = parseInt(m[1], 10);\n  const mm = parseInt(m[2], 10);\n  const mer = m[3].toUpperCase();\n  if (mer === 'AM') { if (h === 12) h = 0; }\n  else { if (h !== 12) h += 12; }\n  return { h, m: mm };\n}\nfunction addMinutesToHM(h, m, add) {\n  const total = h * 60 + m + add;\n  const day = 24 * 60;\n  const norm = ((total % day) + day) % day;\n  return { h: Math.floor(norm / 60), m: norm % 60 };\n}\nfunction pad2(n){ return String(n).padStart(2,'0'); }\nfunction toIsoWithOffset(dateStr, h, m, offset = '+05:30') {\n  return `${dateStr}T${pad2(h)}:${pad2(m)}:00${offset}`;\n}\nfunction displayIST(dateStr, h, m) {\n  const months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"];\n  const [Y, M, D] = dateStr.split('-').map(x => parseInt(x, 10));\n  let mer = 'AM', hh12 = h;\n  if (h === 0) { hh12 = 12; mer = 'AM'; }\n  else if (h === 12) { hh12 = 12; mer = 'PM'; }\n  else if (h > 12) { hh12 = h - 12; mer = 'PM'; }\n  const mm = pad2(m);\n  return `${D} ${months[M-1]} ${Y}, ${pad2(hh12)}:${mm} ${mer} IST`;\n}\nfunction isoToDisplayIST(iso) {\n  // Expect \"+05:30\" but if given any, we still render as IST label\n  const m = String(iso||'').match(/^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2})/);\n  if (!m) return '';\n  const [_, Y, Mo, D, H, Mi] = m.map(Number);\n  return displayIST(`${pad2(Y)}-${pad2(Mo)}-${pad2(D)}`, H, Mi);\n}\n\nconst tz = 'Asia/Kolkata'; // IST (+05:30)\nconst OFFSET = '+05:30';\n\nconst item = items[0]?.json ?? {};\nlet agent = item.output;\n\n// If agent is a JSON string, parse it\nif (typeof agent === 'string') {\n  try { agent = JSON.parse(agent); } catch { /* leave as string if not JSON */ }\n}\n\n// If agent already gave start_iso/end_iso, just normalize and return\nif (agent && typeof agent === 'object' && agent.start_iso && agent.end_iso) {\n  const summary = String(agent.summary || item.Title || '').trim();\n  const description = String(agent.description || item.Description || '').trim();\n  const start_iso = String(agent.start_iso).trim();\n  const end_iso   = String(agent.end_iso).trim();\n\n  const out = {\n    summary,\n    description,\n    start_iso,\n    end_iso,\n    start_display: agent.start_display || isoToDisplayIST(start_iso),\n    end_display: agent.end_display || isoToDisplayIST(end_iso),\n    timezone: tz,\n    start_bracketed: `[DateTime: ${start_iso}]`,\n    end_bracketed: `[DateTime: ${end_iso}]`,\n  };\n  return [{ json: out }];\n}\n\n// Otherwise, fall back to traditional fields\nconst dateStr   = String(item['Date'] || '').trim();          // \"YYYY-MM-DD\"\nconst startStr  = String(item['Start time'] || '').trim();    // \"hh:mm AM/PM\"\nconst endStrRaw = String(item['End time'] || '').trim();      // \"hh:mm AM/PM\" (optional)\nconst summary   = String(item['Title'] || '').trim();\nconst description = String(item['Description'] || '').trim();\n\nif (!dateStr) {\n  // Friendlier message and show what we DID receive\n  throw new Error('Missing \"Date\" (expected YYYY-MM-DD). Provide either {Date, Start time, End time} OR an AI Agent \"output\" with start_iso/end_iso.');\n}\n\nconst { h: sh, m: sm } = parseTime12h(startStr);\nlet { h: eh, m: em } = endStrRaw ? parseTime12h(endStrRaw) : addMinutesToHM(sh, sm, 60);\n\n// Ensure end > start\nconst startMin = sh * 60 + sm;\nlet endMin = eh * 60 + em;\nif (endMin <= startMin) {\n  const bumped = addMinutesToHM(sh, sm, 60);\n  eh = bumped.h; em = bumped.m;\n}\n\nconst start_iso = toIsoWithOffset(dateStr, sh, sm, OFFSET);\nconst end_iso   = toIsoWithOffset(dateStr, eh, em, OFFSET);\n\nconst out = {\n  summary,\n  description,\n  start_iso,\n  end_iso,\n  start_display: displayIST(dateStr, sh, sm),\n  end_display: displayIST(dateStr, eh, em),\n  timezone: tz,\n  start_bracketed: `[DateTime: ${start_iso}]`,\n  end_bracketed: `[DateTime: ${end_iso}]`,\n};\n\nreturn [{ json: out }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        -64
      ],
      "id": "24c56559-d278-44c8-a7fc-43a3a70cb923",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "sendTo": "jashwanthboddupally@gmail.com,support@botcampus.ai",
        "subject": "=ðŸ“… Event: {{ $('AI Assistant Intake').item.json['Title '] }}",
        "message": "=<!doctype html>\n<html>\n  <body style=\"margin:0;padding:0;background:#f6f7f9;\">\n    <table width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" role=\"presentation\">\n      <tr>\n        <td align=\"center\" style=\"padding:24px;\">\n          <!-- Card -->\n          <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" role=\"presentation\" style=\"width:600px;max-width:100%;background:#ffffff;border:1px solid #e5e7eb;border-radius:12px;overflow:hidden;\">\n            <!-- Banner -->\n            <tr>\n              <td style=\"padding:18px 22px;background:#0ea5e9;color:#fff;font:600 16px/1.4 Segoe UI, Roboto, Arial, sans-serif;\">\n                Event Notification\n              </td>\n            </tr>\n\n            <!-- Content -->\n            <tr>\n              <td style=\"padding:22px;color:#0f172a;font:14px/1.55 Segoe UI, Roboto, Arial, sans-serif;\">\n                <!-- TITLE (drag your field to replace) -->\n                <h2 style=\"margin:0 0 10px 0;font:700 20px/1.3 Segoe UI, Roboto, Arial, sans-serif;\">\n                  {{ $json.summary }}\n                  {{ $json.description }}\n                </h2>\n\n                <!-- QUICK ROWS: drag values on the right side -->\n                <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"border-collapse:separate;border-spacing:0 8px;\">\n                  <tr>\n                    <td width=\"130\" style=\"color:#64748b;vertical-align:top;\">When</td>\n                    <td style=\"vertical-align:top;\">\n                      <!-- If same-day, you can combine; otherwise keep both lines -->\n                      {{ $json.start_display || '' }}\n                      {{ $json.end_display ? ' â€” ' + $json.end_display : '' }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td width=\"130\" style=\"color:#64748b;vertical-align:top;\">Time zone</td>\n                    <td style=\"vertical-align:top;\">\n                      {{ $json.timezone || 'Asia/Kolkata' }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td width=\"130\" style=\"color:#64748b;vertical-align:top;\">Summary (email)</td>\n                    <td style=\"vertical-align:top;\">\n                      {{ $json.email_summary || ($json.summary ? 'Reminder for ' + $json.summary : '') }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td width=\"130\" style=\"color:#64748b;vertical-align:top;\">ISO Start</td>\n                    <td style=\"vertical-align:top;\">\n                    {{ $json.start_iso }}\n                    </td>\n                  </tr>\n                  <tr>\n                    <td width=\"130\" style=\"color:#64748b;vertical-align:top;\">ISO End</td>\n                    <td style=\"vertical-align:top;\">\n                    {{ $json.end_iso }}\n                    </td>\n                  </tr>\n                </table>\n\n                <!-- DESCRIPTION (drag your field inside) -->\n                <div style=\"margin-top:14px;white-space:pre-wrap;\">\n                 {{ $json.description }}\n                </div>\n\n                <!-- Optional CTA (drag a link field if you have one) -->\n                <!--\n                <div style=\"margin-top:16px;\">\n                  <a href=\"https://meet.google.com/arz-mtsk-imt\" \n                     style=\"display:inline-block;padding:10px 14px;background:#0ea5e9;color:#fff;text-decoration:none;border-radius:8px;\">\n                    Join / Open\n                  </a>\n                </div>\n                -->\n\n                <hr style=\"margin:18px 0;border:none;border-top:1px solid #e5e7eb;\">\n                <div style=\"color:#64748b;font-size:12px;\">\n                  This is an automated message. Add to Google Calendar using the ISO timestamps if needed.\n                </div>\n              </td>\n            </tr>\n\n            <!-- Footer -->\n            <tr>\n              <td style=\"padding:12px 22px;background:#f8fafc;color:#94a3b8;font:12px/1.5 Segoe UI, Roboto, Arial, sans-serif;\">\n                BotCampus Â· Calendar Formatter\n              </td>\n            </tr>\n          </table>\n          <!-- /Card -->\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>\n",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        720,
        -240
      ],
      "id": "dc014ee8-cbd0-4a5b-8e34-7f8b5ae92c79",
      "name": "Send a message",
      "webhookId": "16dbce60-f4ec-4402-9afb-94422ae298eb",
      "credentials": {
        "gmailOAuth2": {
          "id": "H8FsF1EFAlLLjH1d",
          "name": "N8n office setup"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "2937d85f1e262c6966fbcb3e06873fe45ffb305521dc652e1465ab9c1130efbf@group.calendar.google.com",
          "mode": "list",
          "cachedResultName": "n8n"
        },
        "start": "={{ $json.start_iso }}",
        "end": "={{ $json.end_iso }}",
        "additionalFields": {
          "description": "={{ $('AI Assistant Intake').item.json['Title '] }},{{ $('AI Assistant Intake').item.json.Description }}",
          "summary": "={{ $json.summary }}"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        736,
        208
      ],
      "id": "0a090c95-ec65-453f-aafb-918727b3e7f3",
      "name": "Create an event",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "zw8ZNobw6sYEQBy7",
          "name": "Calendar"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "AI Assistant Intake": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Create an event",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ac35e5cb-ee7b-433e-b22f-f332981a4ede",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3dea0691859c9aeb717420e8c6ea2b1a347ba82ac56d40cedc9406e5f2667166"
  },
  "id": "pTAyTGmt4nJWfCx4",
  "tags": []
}