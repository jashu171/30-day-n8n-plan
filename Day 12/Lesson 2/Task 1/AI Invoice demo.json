{
  "name": "AI Invoice Demo",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -864,
        -16
      ],
      "id": "1af33083-56f0-44be-9859-a054e43c40fc",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "435dd60b-8cc7-456b-a031-9eb29a03af6b",
              "name": "Invoice URL",
              "value": "https://drive.google.com/file/d/1xsEyWTEqbif07l5zF1tHjWrYCCKgdPif/view?usp=sharing",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -544,
        -16
      ],
      "id": "e312e510-77cb-4b6a-98a2-79c74b1a7e8c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are “DriveDoc Mailer,” an AI that reads a document from Google Drive and produces an email-ready summary.\n\nINPUTS (provided via n8n fields/expressions)\n- pdf_url: {{$json.pdfUrl || $json.url || $json.publicUrl || ''}}\n- file_name: {{$json.fileName || $json.name || ''}}\n- mime_type: {{$json.mimeType || ''}}\n- ocr_text: {{$json.ocr_text || ''}}   // optional pre-extracted text\n- palette_hint: {{$json.palette_hint || 'slate'}}  // teal | emerald | amber | violet | rose | slate\n\nWHAT TO READ\n- If a file is attached (PDF/image), read it.\n- If text is provided in ocr_text, use it as additional context.\n- If nothing is readable, still produce a graceful email with “Unknown” where needed.\n\nOBJECTIVE\nCreate a professional executive summary of the document with a clean HTML email body and a short, informative subject.\n\nCOLOR THEME\nUse the palette_hint to theme the email header and button.\n  teal  = #0d9488\n  emerald = #059669\n  amber = #d97706\n  violet = #7c3aed\n  rose   = #e11d48\n  slate  = #334155\n\nOUTPUT FORMAT — EXACTLY TWO SECTIONS (no extra text, no code fences):\nSUBJECT:\n<one concise line — include file_name when useful>\n\nBODY:\n<html>…</html>\n\nHTML REQUIREMENTS\n- Self-contained HTML (inline CSS), width 600px max.\n- Sections: header (title + file_name), key highlights (bullets), short paragraph summary, optional details (dates, entities, amounts), and a CTA button:\n  - Button text: “View Document”\n  - Button href: use pdf_url if present; otherwise omit the button.\n- If a value is unclear, print “Unknown”.\n- Do not include JSON. Do not include “PDF_URL:” lines. Only the two sections above.\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        64,
        -80
      ],
      "id": "0e175fef-7bb2-4cf1-b38d-c63bba03e61a",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsCode": "// n8n Code node (JavaScript)\n// Input: the previous AI Agent node's output\n// Output: { subject, bodyHtml, pdfUrl }\n\nfunction getRaw(aiOut) {\n  // Be defensive: support various shapes\n  return (\n    aiOut?.output ||\n    aiOut?.text ||\n    aiOut?.data ||\n    aiOut?.content ||\n    aiOut?.choices?.[0]?.message?.content ||\n    aiOut?.choices?.[0]?.text ||\n    aiOut?.message ||\n    aiOut ||\n    ''\n  );\n}\n\nfunction stripFences(s) {\n  let t = String(s || '').trim();\n  if (t.startsWith('```')) {\n    // remove first fence\n    t = t.replace(/^```[a-zA-Z0-9]*\\s*/, '');\n    // remove trailing fence\n    t = t.replace(/```$/, '');\n  }\n  return t.trim();\n}\n\nfunction parseSections(raw) {\n  const text = stripFences(raw);\n\n  // Find SUBJECT then BODY\n  const subjRe = /^\\s*SUBJECT:\\s*([\\s\\S]*?)\\n\\s*BODY:\\s*/i;\n  const m = text.match(subjRe);\n\n  let subject = '';\n  let body = '';\n\n  if (m) {\n    subject = (m[1] || '').trim();\n    body = text.slice(m.index + m[0].length).trim();\n  } else {\n    // Fallback: try simpler split\n    const idx = text.toUpperCase().indexOf('BODY:');\n    if (idx > -1) {\n      subject = text.slice(0, idx).replace(/^\\s*SUBJECT:\\s*/i, '').trim();\n      body = text.slice(idx + 5).trim();\n    } else {\n      // Nothing matched: put everything into body\n      body = text;\n    }\n  }\n  return { subject, body };\n}\n\nfunction ensureHtml(html) {\n  const t = String(html || '').trim();\n  if (t.startsWith('<') && t.includes('</')) return t;\n  // Wrap plain text as preformatted HTML if the model failed to send HTML\n  return (\n    '<!DOCTYPE html><html><head><meta charset=\"utf-8\">' +\n    '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">' +\n    '</head><body style=\"font-family:Arial,Segoe UI,Helvetica,Roboto,sans-serif; padding:16px;\">' +\n    '<pre style=\"white-space:pre-wrap; word-break:break-word; font:inherit;\">' +\n    t.replace(/</g, '&lt;').replace(/>/g, '&gt;') +\n    '</pre></body></html>'\n  );\n}\n\nfunction extractPdfUrl(html) {\n  // Try to pull a likely PDF/document link from anchors first\n  const hrefMatch = html.match(/href=[\"']([^\"']+)[\"']/i);\n  if (hrefMatch) return hrefMatch[1];\n\n  // Fallback: any http(s) link in text\n  const urlMatch = html.match(/https?:\\/\\/[^\\s\"'<>]+/i);\n  return urlMatch ? urlMatch[0] : '';\n}\n\n// ---- Main ----\nconst item = $input.first();\nconst raw = getRaw(item.json);\n\n// Parse the two sections\nconst { subject, body } = parseSections(raw);\n\n// Guarantee HTML body\nconst bodyHtml = ensureHtml(body);\n\n// Best-effort PDF URL extraction (handy if you want to log or reuse it)\nconst pdfUrl = extractPdfUrl(bodyHtml);\n\n// Return single clean payload\nreturn [\n  {\n    json: {\n      subject: subject || 'Document Summary',\n      bodyHtml,\n      pdfUrl\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        -48
      ],
      "id": "876b9cfd-d2e7-4fbd-af9c-2859dd787172",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "sendTo": "jashwanthboddupally@gmail.com",
        "subject": "=Invoice AI Agent -  {{ $json.subject }}",
        "message": "={{ $json.bodyHtml }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        -96
      ],
      "id": "070d26b0-c74b-42a5-96b5-abbe03c3bc5d",
      "name": "Send a message",
      "webhookId": "face9d79-6ccb-48b2-a27a-1523ec147fac",
      "credentials": {
        "gmailOAuth2": {
          "id": "H8FsF1EFAlLLjH1d",
          "name": "N8n office setup"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        16,
        224
      ],
      "id": "b41c97aa-7b2b-43f5-afec-509aaed09edd",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "o1yvYdsTMwd04brT",
          "name": "Gemini 2.5-flash"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "1xsEyWTEqbif07l5zF1tHjWrYCCKgdPif",
          "mode": "list",
          "cachedResultName": "invoice.pdf",
          "cachedResultUrl": "https://drive.google.com/file/d/1xsEyWTEqbif07l5zF1tHjWrYCCKgdPif/view?usp=drivesdk"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -320,
        -32
      ],
      "id": "c8ec2d71-b243-4530-9050-e7e541e90063",
      "name": "Download file",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "DDww6KfVnEMmLdiU",
          "name": "Google Drive account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Download file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Download file": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "8ff2269b-3e89-4aa5-8b4a-1ed71560aa79",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3dea0691859c9aeb717420e8c6ea2b1a347ba82ac56d40cedc9406e5f2667166"
  },
  "id": "0JQGFybgGBxH5Ugm",
  "tags": []
}
